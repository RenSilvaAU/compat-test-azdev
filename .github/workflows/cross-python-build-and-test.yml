name: Cross Python Build and Test (Build with Python 3.13)

on:
  workflow_dispatch:
    inputs:
      azdev_repo:
        description: 'Azure CLI Dev Tools repository (owner/repo)'
        required: true
        default: 'Azure/azure-cli-dev-tools'
        type: string
      azdev_branch:
        description: 'Branch to build azdev from'
        required: true
        default: 'dev'
        type: string
      azdev_build_python_version:
        description: 'Python version to build azdev with'
        required: true
        default: '3.13'
        type: string
      aaz_dev_tools_repo:
        description: 'AAZ Dev Tools repository (owner/repo)'
        required: true
        default: 'Azure/aaz-dev-tools'
        type: string
      aaz_dev_tools_branch:
        description: 'Branch to get aaz-dev-tools requirements from'
        required: true
        default: 'main'
        type: string

jobs:
  build-azdev:
    name: "Build azdev with Python ${{ github.event.inputs.azdev_build_python_version }} on ${{ matrix.os }}"
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Echo build information
      run: |
        echo "=== Building azdev with Python ${{ github.event.inputs.azdev_build_python_version }} ==="
        echo "Azure CLI Dev Tools: ${{ github.event.inputs.azdev_repo }} (branch: ${{ github.event.inputs.azdev_branch }})"
        echo "Building on: ${{ matrix.os }} with Python ${{ github.event.inputs.azdev_build_python_version }}"
        echo "============================================"
        
    - name: Checkout compatibility test repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ github.event.inputs.azdev_build_python_version }} for building
      uses: actions/setup-python@v5
      with:
        python-version: ${{ github.event.inputs.azdev_build_python_version }}
        
    - name: Clone azure-cli-dev-tools
      run: |
        git clone https://github.com/${{ github.event.inputs.azdev_repo }}.git azure-cli-dev-tools
        cd azure-cli-dev-tools
        git checkout ${{ github.event.inputs.azdev_branch }}
        
    - name: Clone aaz-dev-tools for requirements
      run: |
        git clone https://github.com/${{ github.event.inputs.aaz_dev_tools_repo }}.git aaz-dev-tools
        cd aaz-dev-tools
        git checkout ${{ github.event.inputs.aaz_dev_tools_branch }}
        
    - name: Build azdev wheel with Python ${{ github.event.inputs.azdev_build_python_version }}
      run: |
        cd azure-cli-dev-tools
        python -m pip install --upgrade pip setuptools wheel build
        python -m build --wheel
        
    - name: Prepare requirements files
      shell: bash
      run: |
        echo "=== Preparing aaz-dev-tools requirements ==="
        cat aaz-dev-tools/requirements.txt
        grep -v "^azdev" aaz-dev-tools/requirements.txt > scripts/cross_aaz_requirements.txt || true
        echo "=== Final aaz-dev-tools requirements (azdev removed) ==="
        cat scripts/cross_aaz_requirements.txt
        echo ""
        echo "=== Preparing azure-cli-dev-tools requirements ==="
        cat azure-cli-dev-tools/requirements.txt
        grep -v "^azdev" azure-cli-dev-tools/requirements.txt > scripts/cross_azure_cli_requirements.txt || true
        echo "=== Final azure-cli-dev-tools requirements (azdev removed) ==="
        cat scripts/cross_azure_cli_requirements.txt
        
    - name: Upload azdev wheel and requirements as artifacts
      uses: actions/upload-artifact@v4
      with:
        name: cross-test-artifacts-${{ matrix.os }}-py${{ github.event.inputs.azdev_build_python_version }}
        path: |
          azure-cli-dev-tools/dist/*.whl
          scripts/cross_aaz_requirements.txt
          scripts/cross_azure_cli_requirements.txt
        retention-days: 1

  test-aaz-dev-tools-cross:
    name: "aaz-dev-tools: Python ${{ matrix.python-version }} on ${{ matrix.os }} (azdev built with Py${{ github.event.inputs.azdev_build_python_version }})"
    needs: build-azdev
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Echo test information
      run: |
        echo "=== Testing aaz-dev-tools with Python ${{ github.event.inputs.azdev_build_python_version }} built azdev ==="
        echo "AAZ Dev Tools: ${{ github.event.inputs.aaz_dev_tools_repo }} (branch: ${{ github.event.inputs.aaz_dev_tools_branch }})"
        echo "Testing on: ${{ matrix.os }} with Python ${{ matrix.python-version }}"
        echo "Using azdev built with Python ${{ github.event.inputs.azdev_build_python_version }}"
        echo "============================================"
        
    - name: Checkout compatibility test repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download cross-test artifacts
      uses: actions/download-artifact@v4
      with:
        name: cross-test-artifacts-${{ matrix.os }}-py${{ github.event.inputs.azdev_build_python_version }}
        path: artifacts/
        
    - name: Clone aaz-dev-tools
      run: |
        git clone https://github.com/${{ github.event.inputs.aaz_dev_tools_repo }}.git aaz-dev-tools
        cd aaz-dev-tools
        git checkout ${{ github.event.inputs.aaz_dev_tools_branch }}
        
    - name: Test aaz-dev-tools with cross-built azdev (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/cross_test_aaz_unix.sh
        scripts/cross_test_aaz_unix.sh ${{ matrix.python-version }} ${{ matrix.os }}
        
    - name: Test aaz-dev-tools with cross-built azdev (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        scripts\cross_test_aaz_windows.ps1 -PythonVersion "${{ matrix.python-version }}" -OSName "${{ matrix.os }}"

  test-azure-cli-requirements-cross:
    name: "azure-cli-reqs: Python ${{ matrix.python-version }} on ${{ matrix.os }} (azdev built with Py${{ github.event.inputs.azdev_build_python_version }})"
    needs: build-azdev
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
        python-version: ['3.9', '3.10', '3.11', '3.12', '3.13']
        
    runs-on: ${{ matrix.os }}
    
    steps:
    - name: Echo test information
      run: |
        echo "=== Testing azure-cli requirements with Python ${{ github.event.inputs.azdev_build_python_version }} built azdev ==="
        echo "Azure CLI Dev Tools: ${{ github.event.inputs.azdev_repo }} (branch: ${{ github.event.inputs.azdev_branch }})"
        echo "Testing on: ${{ matrix.os }} with Python ${{ matrix.python-version }}"
        echo "Using azdev built with Python ${{ github.event.inputs.azdev_build_python_version }}"
        echo "============================================"
        
    - name: Checkout compatibility test repository
      uses: actions/checkout@v4
      
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        
    - name: Download cross-test artifacts
      uses: actions/download-artifact@v4
      with:
        name: cross-test-artifacts-${{ matrix.os }}-py${{ github.event.inputs.azdev_build_python_version }}
        path: artifacts/
        
    - name: Test azure-cli requirements with cross-built azdev (Unix)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/cross_test_azure_cli_unix.sh
        scripts/cross_test_azure_cli_unix.sh ${{ matrix.python-version }} ${{ matrix.os }}
        
    - name: Test azure-cli requirements with cross-built azdev (Windows)
      if: runner.os == 'Windows'
      shell: pwsh
      run: |
        scripts\cross_test_azure_cli_windows.ps1 -PythonVersion "${{ matrix.python-version }}" -OSName "${{ matrix.os }}"
        
    - name: Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: cross-test-results-${{ matrix.os }}-python${{ matrix.python-version }}
        path: |
          test_env/
        retention-days: 5
